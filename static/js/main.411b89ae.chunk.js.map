{"version":3,"sources":["store/configureStore.js","constants/index.js","actions/index.js","components/ReminderList.js","components/App.js","serviceWorker.js","index.js","reducers/index.js","store/configureStore.prod.js"],"names":["module","exports","require","__webpack_require__","d","__webpack_exports__","ADD_REMINDER","DELETE_REMINDER","CLEAR_REMINDER","COOKIE_KEY_REMINDER","addReminder","text","time","type","deleteReminder","id","clearReminder","ReminderList","props","reminders","react_default","a","createElement","className","map","reminder","key","moment","Date","fromNow","onClick","handleDeleteReminder","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","placeholder","onChange","e","setState","target","value","bind","Component","connect","dispatch","bindActionCreators","actions","Boolean","window","location","hostname","match","store","configureStore","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","arguments","length","undefined","read_cookie","action","toConsumableArray","concat","Math","random","bake_cookie","filter","preloadedState","createStore","rootReducer","applyMiddleware","thunk","promise"],"mappings":"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","file":"static/js/main.411b89ae.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\n    module.exports = require('./configureStore.prod');\n} else {\n    module.exports = require('./configureStore.dev');\n}","export const ADD_REMINDER = \"ADD_REMINDER\";\nexport const DELETE_REMINDER = \"DELETE_REMINDER\";\nexport const CLEAR_REMINDER = \"CLEAR_REMINDER\";\nexport const COOKIE_KEY_REMINDER = \"reminder\";","import {ADD_REMINDER,DELETE_REMINDER,CLEAR_REMINDER} from \"../constants\";\n\nexport const addReminder = (text,time) => {\n    return {\n        type:ADD_REMINDER,\n        text,\n        time\n    }\n};\n\nexport const deleteReminder = (id) => {\n    return {\n        type:DELETE_REMINDER,\n        id\n    }\n}\n\nexport const clearReminder = () => {\n    return {\n        type:CLEAR_REMINDER\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'\nimport '../css/App.css';\nexport default function ReminderList(props) {\n    let reminders = props.reminders;\n    return(\n        <ul className=\"list-group col-sm-8 mt-2\">\n            {\n                reminders.map((reminder) => {\n                    return (\n                        <li key={ reminder.id } className=\"list-group-item\">\n                            <div className=\"list-item\">\n                                <div>{ reminder.text }</div>\n                                <div><em>{moment(new Date(reminder.time)).fromNow()}</em></div>\n\n                            </div>\n                            <div className=\"list-item delete_button\" onClick={ ()=> props.handleDeleteReminder(reminder.id) }>&#x2715;</div>\n                        </li>\n                    )\n                })\n            }\n\n        </ul>\n    );\n}\n\n\nReminderList.propTypes = {\n    reminders:PropTypes.array.isRequired,\n    handleDeleteReminder:PropTypes.func.isRequired\n}\n","import React, { Component } from 'react';\nimport '../css/App.css';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport * as actions from '../actions';\nimport PropTypes from 'prop-types';\nimport ReminderList from './ReminderList';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          text:\"\",\n          time:\"\"\n        }\n    }\n\n    addReminder() {\n        this.props.addReminder(this.state.text,this.state.time);\n    }\n\n    deleteReminder(id){\n        this.props.deleteReminder(id);\n    }\n\n    clearReminder(){\n        this.props.clearReminder();\n    }\n\n    render(){\n      const {reminders} = this.props;\n      return (\n        <div className=\"App\">\n            <div className=\"title\">Reminder Pro</div>\n            <div className=\"form-inline\">\n                <div className=\"form-group mr-2\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"I have to...\"\n                           onChange={(e) => this.setState({text:e.target.value})} />\n                </div>\n                <div className=\"form-group mr-2\">\n                    <input type=\"datetime-local\" className=\"form-control\"\n                        onChange={(e) => this.setState({time:e.target.value})} />\n                </div>\n                <button type=\"button\" className=\"btn btn-success\" onClick={ ()=> this.addReminder() }>Add Reminder</button>\n            </div>\n            <ReminderList reminders={reminders} handleDeleteReminder={this.deleteReminder.bind(this)}/>\n\n            <button type=\"button\" className=\"btn btn-danger mt-3\" onClick={ ()=> this.clearReminder() }>Clear Reminder</button>\n\n        </div>\n      );\n  }\n}\n\nApp.propTypes = {\n    addReminder:PropTypes.func.isRequired,\n    reminders:PropTypes.array.isRequired,\n    clearReminder:PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) =>{\n    return{\n        reminders : state\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return bindActionCreators(actions,dispatch);\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport configureStore from './store/configureStore'\n\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n    document.getElementById('root'));\n\n\n// //热加载\nif (module.hot) {\n    module.hot.accept('./components/App', () => {\n        ReactDOM.render(\n            <Provider store={ store }>\n                <App/>\n            </Provider>,\n            document.getElementById('root')\n        );\n    })\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {ADD_REMINDER,DELETE_REMINDER,CLEAR_REMINDER,COOKIE_KEY_REMINDER} from \"../constants\";\nimport {bake_cookie,read_cookie} from 'sfcookies';\n\n\n\nconst reminder = (action) => {\n    const{text,time} = action\n    return ({\n        id : Math.random(),\n        text,\n        time\n    });\n}\n\n\n\nconst reminders = (state = read_cookie(COOKIE_KEY_REMINDER) || [], action = {}) => {\n    let reminders = null;\n    switch(action.type) {\n        case ADD_REMINDER:\n            reminders = [\n                ...state,\n                reminder(action)\n            ];\n            bake_cookie(COOKIE_KEY_REMINDER,reminders);\n            return reminders;\n        case DELETE_REMINDER:\n            reminders = state.filter((reminder)=> reminder.id !== action.id);\n            bake_cookie(COOKIE_KEY_REMINDER,reminders);\n            return reminders;\n        case CLEAR_REMINDER:\n            reminders = [];\n            bake_cookie(COOKIE_KEY_REMINDER,reminders);\n            return reminders;\n        default: return state;\n    }\n}\n\nexport default reminders;","import thunk from 'redux-thunk';\nimport {createStore,applyMiddleware} from 'redux';\nimport rootReducer from '../reducers';\nimport promise from 'redux-promise-middleware';\n\n\nconst configureStore = (preloadedState) => {\n    const store = createStore(\n        rootReducer,\n        preloadedState,\n        applyMiddleware(thunk,promise())\n    );\n    return store;\n}\n\nexport default configureStore;"],"sourceRoot":""}